{"version":3,"sources":["App.js","index.js","serviceWorker.js"],"names":["iteratePuzzleCurves","iterBezierPath","DEFAULT_PARAMETERS","width","height","pieces","gap","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","objectSpread","rngSeed","showControlPoints","mode","_this2","react_default","a","createElement","className","style","marginTop","href","App_Puzzle","reactstrap_es","onClick","_ref","blockMetrics","calculateBlockMetrics","svgPath","Array","from","map","c","toSvgPath","join","filename","content","mimeType","element","document","setAttribute","concat","encodeURIComponent","display","body","appendChild","click","removeChild","downloadFile","SVG_HEADER","generateSvgText","App_Algorithm","for","type","name","id","value","onChange","e","setState","target","tag","check","checked","parseFloat","parseInt","Component","Puzzle","_this3","model_width","model_height","screen_height","screenTransform","ScreenTransform","curves","border","curve","idx","toSvg","numRows","numCols","actualNumPieces","Algorithm","_this4","rng","seedrandom","iter_bezier_curves","desiredNumPieces","ideal_side","Math","sqrt","round","block_width","block_height","gapPercentageInBlock","rowIdx","colIdx","flip","t","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","_colIdx","_rowIdx","_flip","_t","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","_curve","regenerator_default","wrap","_context","prev","next","Rectangle","Transform","HORIZONTAL","undefined","Symbol","iterator","done","transform","t0","return","finish","VERTICAL","t1","stop","_marked","TOOTH_CONSTANTS","base_height","Val","tooth_base_middle","tooth_neck_width","tooth_left_width","tooth_right_width","tooth_height","variability","point","direction","v","constants","result","_arr","keys","_i","length","key","randomizeValues","left_neck_side","right_neck_side","left_side","right_side","tooth_total_height","mid_tooth_total_height","mid_tooth_height","top_tooth_height","P","length_after","ControlPoint","length_before","LastControlPoint","x","y","Point","start_control_point","previous_control_point","_len","other_control_points","_key","_i2","next_control_point","_args2","arguments","_context2","BezierCurve","pointOnSegment","_marked2","distance_from_a","ratio","pow","b","d","fill","stroke","ca","cb","parts","svg_circle","svg_line","p","color","cx","cy","r","strokeDasharray","_x","_y","sx","sy","orientation","canvas_height","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.edd3e04b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap';\nimport seedrandom from 'seedrandom';\n\nconst DEFAULT_PARAMETERS = {\n    width: 297,\n    height: 210,\n    pieces: 100,\n    gap: 0.2,\n};\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            rngSeed: 'puzzle 1',\n            showControlPoints: false,\n            mode: 'puzzle',\n            ...DEFAULT_PARAMETERS,\n        };\n    }\n\n    render() {\n        return (\n            <div className=\"container\" style={{ marginTop: 20 }}>\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <h2>Jigsaw Puzzle Generator</h2>\n                        <p>\n                            Code available in <a href=\"https://github.com/stefanomasini/jigsaw-puzzle\">GitHub</a>\n                        </p>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-sm\">\n                        {this.state.mode === 'puzzle' && (\n                            <div>\n                                <Puzzle\n                                    rngSeed={this.state.rngSeed}\n                                    showControlPoints={this.state.showControlPoints}\n                                    width={this.state.width}\n                                    height={this.state.height}\n                                    pieces={this.state.pieces}\n                                    gap={this.state.gap}\n                                />\n                                <Button onClick={() => generateSvgText(this.state)}>Download SVG</Button>\n                            </div>\n                        )}\n                        {this.state.mode === 'algorithm' && <Algorithm rngSeed={this.state.rngSeed} showControlPoints={this.state.showControlPoints} />}\n                    </div>\n                    <div className=\"col-sm\">\n                        <Form>\n                            <FormGroup>\n                                <Label for=\"rngSeed\">Seed for random number generation</Label>\n                                <Input\n                                    type=\"text\"\n                                    name=\"rngSeed\"\n                                    id=\"rngSeed\"\n                                    value={this.state.rngSeed}\n                                    onChange={e => {\n                                        this.setState({ rngSeed: e.target.value });\n                                    }}\n                                />\n                            </FormGroup>\n                            <FormGroup tag=\"fieldset\">\n                                <legend>Mode</legend>\n                                <FormGroup check>\n                                    <Label check>\n                                        <Input\n                                            type=\"radio\"\n                                            name=\"radio_puzzle\"\n                                            checked={this.state.mode === 'puzzle'}\n                                            onChange={() => {\n                                                this.setState({ mode: 'puzzle', showControlPoints: false });\n                                            }}\n                                        />{' '}\n                                        Puzzle generation\n                                    </Label>\n                                </FormGroup>\n                                <FormGroup check>\n                                    <Label check>\n                                        <Input\n                                            type=\"radio\"\n                                            name=\"radio_tuning\"\n                                            checked={this.state.mode === 'algorithm'}\n                                            onChange={() => {\n                                                this.setState({ mode: 'algorithm' });\n                                            }}\n                                        />{' '}\n                                        Algorithm tuning\n                                    </Label>\n                                </FormGroup>\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"pieces\">Uncut gap between pieces (mm)</Label>\n                                <Input\n                                    type=\"text\"\n                                    name=\"gap\"\n                                    id=\"gap\"\n                                    value={this.state.gap}\n                                    onChange={e => {\n                                        this.setState({ gap: parseFloat(e.target.value) });\n                                    }}\n                                />\n                            </FormGroup>\n                            {this.state.mode === 'puzzle' && (\n                                <div>\n                                    <FormGroup>\n                                        <Label for=\"width\">Size (mm)</Label>\n                                        <Input\n                                            type=\"text\"\n                                            name=\"width\"\n                                            id=\"width\"\n                                            value={this.state.width}\n                                            onChange={e => {\n                                                this.setState({ width: parseInt(e.target.value) });\n                                            }}\n                                        />\n                                        <Input\n                                            type=\"text\"\n                                            name=\"height\"\n                                            id=\"height\"\n                                            value={this.state.height}\n                                            onChange={e => {\n                                                this.setState({ height: parseInt(e.target.value) });\n                                            }}\n                                        />\n                                    </FormGroup>\n                                    <FormGroup>\n                                        <Label for=\"pieces\">Desired number of pieces</Label>\n                                        <Input\n                                            type=\"text\"\n                                            name=\"pieces\"\n                                            id=\"pieces\"\n                                            value={this.state.pieces}\n                                            onChange={e => {\n                                                this.setState({ pieces: parseInt(e.target.value) });\n                                            }}\n                                        />\n                                    </FormGroup>\n                                </div>\n                            )}\n                            {this.state.mode === 'algorithm' && (\n                                <FormGroup check>\n                                    <Label check>\n                                        <Input\n                                            type=\"checkbox\"\n                                            checked={this.state.showControlPoints}\n                                            onChange={() => {\n                                                this.setState({ showControlPoints: !this.state.showControlPoints });\n                                            }}\n                                        />{' '}\n                                        Show control points\n                                    </Label>\n                                </FormGroup>\n                            )}\n                            <Button>Submit</Button>\n                        </Form>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Puzzle extends Component {\n    render() {\n        let model_width = this.props.width;\n        let model_height = this.props.height;\n        if (model_width === 0 || model_height === 0) {\n            return null;\n        }\n\n        // Calculate screen transformation\n        let screen_width = 500;\n        let screen_height = (500 / model_width) * model_height;\n        let screenTransform = ScreenTransform(model_height, screen_height);\n\n        // Compute curves\n        let blockMetrics = calculateBlockMetrics(model_width, model_height, this.props.gap, this.props.pieces);\n        let curves = Array.from(iteratePuzzleCurves(blockMetrics, this.props.rngSeed));\n\n        return (\n            <div>\n                <svg width={screen_width} height={screen_height} style={{ border: '0' }}>\n                    {curves.map((curve, idx) => curve.toSvg(idx, screenTransform, this.props.showControlPoints))}\n                </svg>\n                <p style={{ marginTop: 10 }}>\n                    {blockMetrics.numRows} x {blockMetrics.numCols} = <b>{blockMetrics.actualNumPieces} actual pieces</b>\n                </p>\n            </div>\n        );\n    }\n}\n\nclass Algorithm extends Component {\n    render() {\n        // Calculate screen transformation\n        let screen_width = 500;\n        let screen_height = 500;\n        let screenTransform = ScreenTransform(1, 500);\n\n        // Compute curves\n        let rng = seedrandom(this.props.rngSeed);\n        let curves = Array.from(iter_bezier_curves(rng));\n\n        return (\n            <svg width={screen_width} height={screen_height} style={{ border: '1px solid black' }}>\n                {curves.map((curve, idx) => curve.toSvg(idx, screenTransform, this.props.showControlPoints))}\n            </svg>\n        );\n    }\n}\n\n// Copied from an SVG generated with Adobe Illustrator\nconst SVG_HEADER = `<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.0//EN\" \"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd\">\n`;\n\nfunction generateSvgText({ width, height, pieces, rngSeed, gap }) {\n    let blockMetrics = calculateBlockMetrics(width, height, gap, pieces);\n    let curves = Array.from(iteratePuzzleCurves(blockMetrics, rngSeed));\n    let svgPath = curves.map(c => c.toSvgPath()).join('   ');\n    let svgText = `${SVG_HEADER}\n                   <svg version=\"1.0\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" \n                        xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0mm\" y=\"0mm\" width=\"${width}mm\" height=\"${height}mm\" \n                        viewBox=\"0 0 ${width} ${height}\" \n                        enable-background=\"new 0 0 ${width} ${height}\" \n                        xml:space=\"preserve\">\n                       <path d=\"${svgPath}\" fill=\"none\" stroke=\"#000000\" stroke-width=\"0.05pt\"/> \n                   </svg>`;\n    downloadFile('puzzle.svg', svgText, 'image/svg+xml');\n}\n\nfunction downloadFile(filename, content, mimeType) {\n    let element = document.createElement('a');\n    element.setAttribute('href', `data:${mimeType};charset=utf-8,${encodeURIComponent(content)}`);\n    element.setAttribute('download', filename);\n    element.style.display = 'none';\n    document.body.appendChild(element);\n    element.click();\n    document.body.removeChild(element);\n}\n\n// The whole program is conceived thinking HORIZONTAL, with potivive y pointing up.\n// Where you see \"x\" and \"y\", think of horizontal.\n// When vertical is needed, x and y are swapped.\n\nfunction calculateBlockMetrics(model_width, model_height, gap, desiredNumPieces) {\n    let ideal_side = Math.sqrt((model_width * model_height) / desiredNumPieces);\n    let numCols = Math.round(model_width / ideal_side);\n    let block_width = model_width / numCols;\n    let numRows = Math.round(model_height / ideal_side);\n    let block_height = model_height / numRows;\n    let actualNumPieces = numRows * numCols;\n    let gapPercentageInBlock = gap / block_width;\n    return { model_width, model_height, numCols, block_width, numRows, block_height, actualNumPieces, gapPercentageInBlock };\n}\n\nfunction* iteratePuzzleCurves(blockMetrics, rngSeed) {\n    let { numRows, numCols, block_width, block_height, model_width, model_height, gapPercentageInBlock } = blockMetrics;\n    let rng = seedrandom(rngSeed);\n\n    yield new Rectangle(0, 0, model_width, model_height);\n\n    // Rows\n    for (let rowIdx = 1; rowIdx < numRows; rowIdx += 1) {\n        for (let colIdx = 0; colIdx < numCols; colIdx += 1) {\n            let flip = rng() > 0.5;\n            let t = Transform(block_width * colIdx, block_height * rowIdx, block_width, block_height, HORIZONTAL, flip);\n            for (let curve of iter_bezier_curves(rng, gapPercentageInBlock)) {\n                yield curve.transform(t);\n            }\n        }\n    }\n\n    // Columns\n    for (let colIdx = 1; colIdx < numCols; colIdx += 1) {\n        for (let rowIdx = 0; rowIdx < numRows; rowIdx += 1) {\n            let flip = rng() > 0.5;\n            let t = Transform(block_width * colIdx, block_height * rowIdx, block_width, block_height, VERTICAL, flip);\n            for (let curve of iter_bezier_curves(rng, gapPercentageInBlock)) {\n                yield curve.transform(t);\n            }\n        }\n    }\n}\n\nconst HORIZONTAL = 'h';\nconst VERTICAL = 'v';\n\nconst TOOTH_CONSTANTS = {\n    base_height: Val(0.1, 0.03),\n    tooth_base_middle: Val(0.5, 0.08),\n    tooth_neck_width: Val(0.2, 0.04),\n    tooth_left_width: Val(0.15, 0.03),\n    tooth_right_width: Val(0.15, 0.03),\n    tooth_height: Val(0.18, 0.04),\n};\n\nfunction Val(value, variability) {\n    return { value, variability };\n}\n\nfunction iter_bezier_curves(rng, gapPercentageInBlock) {\n    let v = randomizeValues(TOOTH_CONSTANTS, rng);\n    let left_neck_side = v.tooth_base_middle - v.tooth_neck_width / 2;\n    let right_neck_side = 1 - left_neck_side - v.tooth_neck_width;\n    let left_side = v.tooth_base_middle - v.tooth_left_width;\n    let right_side = 1 - left_side - v.tooth_left_width - v.tooth_right_width;\n    let tooth_total_height = v.base_height + v.tooth_height;\n    let mid_tooth_total_height = v.base_height + (3 * v.tooth_height) / 5;\n    let mid_tooth_height = mid_tooth_total_height - v.base_height;\n    let top_tooth_height = tooth_total_height - mid_tooth_total_height;\n    return iterBezierPath(\n        // Left mid-low section\n        FirstControlPoint(P(gapPercentageInBlock, 0), P(1, 0), left_neck_side / 2),\n        ControlPoint(P(left_neck_side, v.base_height), P(0, 1), (2 * v.base_height) / 3, mid_tooth_height / 2),\n\n        // Mid-top section\n        ControlPoint(P(left_side, mid_tooth_total_height), P(0, 1), mid_tooth_height / 2, top_tooth_height / 2),\n        ControlPoint(P(v.tooth_base_middle, tooth_total_height), P(1, 0), v.tooth_left_width / 2, v.tooth_right_width / 2),\n        ControlPoint(P(1 - right_side, mid_tooth_total_height), P(0, -1), top_tooth_height / 2, mid_tooth_height / 2),\n\n        // Right mid-low section\n        ControlPoint(P(1 - right_neck_side, v.base_height), P(0, -1), mid_tooth_height / 2, (2 * v.base_height) / 3),\n        LastControlPoint(P(1 - gapPercentageInBlock, 0), P(1, 0), right_neck_side / 2)\n    );\n}\n\nfunction randomizeValues(constants, rng) {\n    let result = {};\n    for (let key of Object.keys(constants)) {\n        result[key] = constants[key].value + (rng() * 2 - 1) * constants[key].variability;\n    }\n    return result;\n}\n\nfunction P(x, y) {\n    return new Point(x, y);\n}\n\nclass Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    toSvg() {\n        return `${this.x} ${this.y}`;\n    }\n}\n\nfunction* iterBezierPath(start_control_point, ...other_control_points) {\n    let previous_control_point = start_control_point;\n    for (let next_control_point of other_control_points) {\n        yield new BezierCurve(\n            previous_control_point.point,\n            pointOnSegment(previous_control_point.point, previous_control_point.direction, previous_control_point.length_after),\n            pointOnSegment(next_control_point.point, next_control_point.direction, -next_control_point.length_before),\n            next_control_point.point\n        );\n        previous_control_point = next_control_point;\n    }\n}\n\nfunction pointOnSegment(a, direction, distance_from_a) {\n    let direction_length = Math.sqrt(direction.x ** 2 + direction.y ** 2);\n    let ratio = distance_from_a / direction_length;\n    return P(a.x + direction.x * ratio, a.y + direction.y * ratio);\n}\n\nfunction ControlPoint(point, direction, length_before, length_after) {\n    return { point, direction, length_before, length_after };\n}\n\nfunction FirstControlPoint(point, direction, length) {\n    return { point, direction, length_after: length };\n}\n\nfunction LastControlPoint(point, direction, length) {\n    return { point, direction, length_before: length };\n}\n\nclass Rectangle {\n    constructor(x, y, width, height) {\n        this.a = P(x, y);\n        this.b = P(x + width, y);\n        this.c = P(x + width, y + height);\n        this.d = P(x, y + height);\n    }\n\n    toSvgPath() {\n        let { a, b, c, d } = this;\n        return `M ${a.toSvg()} L ${b.toSvg()} L ${c.toSvg()} L ${d.toSvg()} Z`;\n    }\n\n    toSvg(idx, screenTransform, showControlPoints) {\n        let { a, b, c, d } = this;\n        a = screenTransform(a);\n        b = screenTransform(b);\n        c = screenTransform(c);\n        d = screenTransform(d);\n        return <path key={idx} d={`M ${a.toSvg()} L ${b.toSvg()} L ${c.toSvg()} L ${d.toSvg()} Z`} fill=\"none\" stroke=\"black\" />;\n    }\n}\n\nclass BezierCurve {\n    constructor(a, ca, cb, b) {\n        this.a = a;\n        this.ca = ca;\n        this.cb = cb;\n        this.b = b;\n    }\n\n    transform(transform) {\n        return new BezierCurve(transform(this.a), transform(this.ca), transform(this.cb), transform(this.b));\n    }\n\n    toSvgPath() {\n        let { a, ca, cb, b } = this;\n        return `M ${a.toSvg()} C ${ca.toSvg()}, ${cb.toSvg()}, ${b.toSvg()}`;\n    }\n\n    toSvg(idx, screenTransform, showControlPoints) {\n        let { a, ca, cb, b } = this;\n        a = screenTransform(a);\n        ca = screenTransform(ca);\n        cb = screenTransform(cb);\n        b = screenTransform(b);\n        let parts = [];\n        if (showControlPoints) {\n            parts = parts.concat([\n                svg_circle(`${idx}ca`, ca, 'red'),\n                svg_line(`${idx}a-ca`, a, ca),\n                svg_circle(`${idx}cb`, cb, 'red'),\n                svg_line(`${idx}b-cb`, b, cb),\n                svg_circle(`${idx}a`, a, 'green'),\n                svg_circle(`${idx}b`, b, 'green'),\n            ]);\n        }\n        return parts.concat([<path key={idx} d={`M ${a.toSvg()} C ${ca.toSvg()}, ${cb.toSvg()}, ${b.toSvg()}`} fill=\"none\" stroke=\"blue\" />]);\n    }\n}\n\nfunction svg_circle(key, p, color) {\n    return <circle key={key} cx={p.x} cy={p.y} r={3} fill={color} />;\n}\n\nfunction svg_line(key, a, b) {\n    return <path key={key} d={`M ${a.x} ${a.y} L ${b.x} ${b.y}`} stroke=\"red\" strokeDasharray=\"3,3\" />;\n}\n\nfunction Transform(_x, _y, sx, sy, orientation, flip) {\n    return p => {\n        if (flip) {\n            p = P(p.x, -p.y);\n        }\n        if (orientation === VERTICAL) {\n            p = P(p.y, p.x);\n        }\n        let x = p.x * sx + _x;\n        let y = p.y * sy + _y;\n        return new Point(x, y);\n    };\n}\n\nfunction ScreenTransform(model_height, canvas_height) {\n    let ratio = canvas_height / model_height;\n\n    return p => {\n        return new Point(p.x * ratio, canvas_height - p.y * ratio);\n    };\n}\n\nexport default App;\n","import 'bootstrap/dist/css/bootstrap.css';\n// Put any other imports below so that CSS from your\n// components takes precedence over default styles.\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// // In production, we register a service worker to serve assets from local cache.\n//\n// // This lets the app load faster on subsequent visits in production, and gives\n// // it offline capabilities. However, it also means that developers (and users)\n// // will only see deployed updates on the \"N+1\" visit to a page, since previously\n// // cached resources are updated in the background.\n//\n// // To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// // This link also includes instructions on opting out of this behavior.\n//\n// const isLocalhost = Boolean(\n//     window.location.hostname === 'localhost' ||\n//         // [::1] is the IPv6 localhost address.\n//         window.location.hostname === '[::1]' ||\n//         // 127.0.0.1/8 is considered localhost for IPv4.\n//         window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n// );\n//\n// export function register(config) {\n//     if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n//         // The URL constructor is available in all browsers that support SW.\n//         const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n//         if (publicUrl.origin !== window.location.origin) {\n//             // Our service worker won't work if PUBLIC_URL is on a different origin\n//             // from what our page is served on. This might happen if a CDN is used to\n//             // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n//             return;\n//         }\n//\n//         window.addEventListener('load', () => {\n//             const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n//\n//             if (isLocalhost) {\n//                 // This is running on localhost. Let's check if a service worker still exists or not.\n//                 checkValidServiceWorker(swUrl, config);\n//\n//                 // Add some additional logging to localhost, pointing developers to the\n//                 // service worker/PWA documentation.\n//                 navigator.serviceWorker.ready.then(() => {\n//                     console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://goo.gl/SC7cgQ');\n//                 });\n//             } else {\n//                 // Is not local host. Just register service worker\n//                 registerValidSW(swUrl, config);\n//             }\n//         });\n//     }\n// }\n//\n// function registerValidSW(swUrl, config) {\n//     navigator.serviceWorker\n//         .register(swUrl)\n//         .then(registration => {\n//             registration.onupdatefound = () => {\n//                 const installingWorker = registration.installing;\n//                 installingWorker.onstatechange = () => {\n//                     if (installingWorker.state === 'installed') {\n//                         if (navigator.serviceWorker.controller) {\n//                             // At this point, the old content will have been purged and\n//                             // the fresh content will have been added to the cache.\n//                             // It's the perfect time to display a \"New content is\n//                             // available; please refresh.\" message in your web app.\n//                             console.log('New content is available; please refresh.');\n//\n//                             // Execute callback\n//                             if (config.onUpdate) {\n//                                 config.onUpdate(registration);\n//                             }\n//                         } else {\n//                             // At this point, everything has been precached.\n//                             // It's the perfect time to display a\n//                             // \"Content is cached for offline use.\" message.\n//                             console.log('Content is cached for offline use.');\n//\n//                             // Execute callback\n//                             if (config.onSuccess) {\n//                                 config.onSuccess(registration);\n//                             }\n//                         }\n//                     }\n//                 };\n//             };\n//         })\n//         .catch(error => {\n//             console.error('Error during service worker registration:', error);\n//         });\n// }\n//\n// function checkValidServiceWorker(swUrl, config) {\n//     // Check if the service worker can be found. If it can't reload the page.\n//     fetch(swUrl)\n//         .then(response => {\n//             // Ensure service worker exists, and that we really are getting a JS file.\n//             if (response.status === 404 || response.headers.get('content-type').indexOf('javascript') === -1) {\n//                 // No service worker found. Probably a different app. Reload the page.\n//                 navigator.serviceWorker.ready.then(registration => {\n//                     registration.unregister().then(() => {\n//                         window.location.reload();\n//                     });\n//                 });\n//             } else {\n//                 // Service worker found. Proceed as normal.\n//                 registerValidSW(swUrl, config);\n//             }\n//         })\n//         .catch(() => {\n//             console.log('No internet connection found. App is running in offline mode.');\n//         });\n// }\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n"],"sourceRoot":""}